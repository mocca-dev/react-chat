{"version":3,"sources":["firebase.js","components/SignIn.js","components/SignOut.js","components/ChatMessage.js","components/ChatRoom.js","App.js","reportWebVitals.js","serviceWorkerRegistration.js","index.js"],"names":["app","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","auth","googleProvider","GoogleAuthProvider","firestore","SignIn","_ref","_jsx","className","onClick","signInWithPopup","signInWithGoogle","children","SignOut","currentUser","signOut","ChatMessage","message","userUid","text","uid","photoURL","messageClass","_jsxs","concat","src","alt","ChatRoom","scroll","useRef","messagesRef","collection","query","orderBy","limit","messages","useCollectionData","idField","formValue","setFormValue","useState","useEffect","current","scrollIntoView","behavior","_Fragment","map","msg","id","ref","onSubmit","async","e","preventDefault","add","createdAt","FieldValue","serverTimestamp","type","value","onChange","target","App","user","useAuthState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","React","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.e4ceabf9.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\n\nconst app = firebase.initializeApp({\n  apiKey: \"AIzaSyAabYeqpM9D1NGnRcDioq27iT6ZEcpPIsI\",\n  authDomain: \"react-chat-c4e5b.firebaseapp.com\",\n  projectId: \"react-chat-c4e5b\",\n  storageBucket: \"react-chat-c4e5b.appspot.com\",\n  messagingSenderId: \"554576645180\",\n  appId: \"1:554576645180:web:58f68cbb152fa4da77c739\",\n});\n\nexport const auth = firebase.auth();\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\n\nexport const db = firebase.firestore();\n\nexport default app;\n","import React from \"react\";\nimport { googleProvider } from \"../firebase\";\n\nconst signInWithGoogle = (auth) => {\n  auth.signInWithPopup(googleProvider);\n};\n\nconst SignIn = ({ auth }) => {\n  return (\n    <button className=\"sign-in\" onClick={() => signInWithGoogle(auth)}>\n      Sign In with Google\n    </button>\n  );\n};\n\nexport default SignIn;\n","import React from \"react\";\n\nconst SignOut = ({ auth }) => {\n  return auth\n    ? auth.currentUser && (\n        <button className=\"sign-out\" onClick={() => auth.signOut()}>\n          Sign Out\n        </button>\n      )\n    : \"\";\n};\n\nexport default SignOut;\n","import React from \"react\";\n\nconst ChatMessage = ({ message, userUid }) => {\n  const { text, uid, photoURL } = message;\n  const messageClass = uid === userUid ? \"sent\" : \"received\";\n\n  return (\n    <div className={`message ${messageClass}`}>\n      <img\n        src={\n          photoURL || \"https://api.adorable.io/avatars/23/abott@adorable.png\"\n        }\n        alt=\"\"\n      />\n      <p>{text}</p>\n    </div>\n  );\n};\n\nexport default ChatMessage;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport app, { auth } from \"../firebase\";\nimport firebase from \"firebase/app\";\nimport { useCollectionData } from \"react-firebase-hooks/firestore\";\nimport ChatMessage from \"./ChatMessage\";\n\nconst firestore = firebase.firestore(app);\n\nconst ChatRoom = () => {\n  const scroll = useRef();\n  const messagesRef = firestore.collection(\"messages\");\n  const query = messagesRef.orderBy(\"createdAt\").limit(25);\n  const [messages] = useCollectionData(query, { idField: \"id\" });\n  const [formValue, setFormValue] = useState(\"\");\n\n  useEffect(() => {\n    scroll.current.scrollIntoView({ behavior: \"smooth\" });\n  }, []);\n\n  const sendMessage = async (e) => {\n    e.preventDefault();\n    const { uid, photoURL } = auth.currentUser;\n\n    await messagesRef.add({\n      text: formValue,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      uid,\n      photoURL,\n    });\n    setFormValue(\"\");\n    scroll.current.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  return (\n    <>\n      <main>\n        {messages &&\n          messages.map((msg) => (\n            <ChatMessage\n              key={msg.id}\n              message={msg}\n              userUid={auth.currentUser.uid}\n            />\n          ))}\n        <div ref={scroll}></div>\n      </main>\n      <form onSubmit={sendMessage}>\n        <input\n          type=\"text\"\n          value={formValue}\n          onChange={(e) => setFormValue(e.target.value)}\n        />\n        <button type=\"submit\">Send</button>\n      </form>\n    </>\n  );\n};\n\nexport default ChatRoom;\n","import \"./App.css\";\n\nimport { useAuthState } from \"react-firebase-hooks/auth\";\n\nimport SignIn from \"./components/SignIn\";\nimport SignOut from \"./components/SignOut\";\nimport ChatRoom from \"./components/ChatRoom\";\n\nimport { auth } from \"./firebase\";\n\nfunction App() {\n  const [user] = useAuthState(auth);\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h2>React Chat</h2>\n        <SignOut auth={auth} />\n      </header>\n      <section>{user ? <ChatRoom /> : <SignIn auth={auth} />}</section>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { register as registerServiceWorker } from './serviceWorkerRegistration';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\nregisterServiceWorker();\n"],"sourceRoot":""}